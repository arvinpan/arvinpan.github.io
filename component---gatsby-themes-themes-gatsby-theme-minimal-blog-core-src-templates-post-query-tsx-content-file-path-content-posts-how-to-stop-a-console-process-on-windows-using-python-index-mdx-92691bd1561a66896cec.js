"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[560],{70:function(e,n,t){t.d(n,{p:function(){return p},A:function(){return d}});var l=t(6540),a=t(557),o=t(6835),r=t(9702),s=t(1321),i=t(2887);var c=e=>{let{post:n}=e;return null};const u=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var m=e=>{let{data:{post:n},children:t}=e;return(0,a.Y)(r.A,null,(0,a.Y)(o.DZ,{as:"h1",variant:"styles.h1"},n.title),(0,a.Y)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,a.Y)("time",null,n.date),n.tags&&(0,a.Y)(l.Fragment,null," — ",(0,a.Y)(s.A,{tags:n.tags})),n.timeToRead&&" — ",n.timeToRead&&(0,a.Y)("span",null,n.timeToRead," min read")),(0,a.Y)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:u.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},t),(0,a.Y)(c,{post:n}))};const p=e=>{var n,t,l;let{data:{post:o}}=e;return(0,a.Y)(i.A,{title:o.title,description:o.description?o.description:o.excerpt,image:o.banner?null===(n=o.banner)||void 0===n||null===(t=n.childImageSharp)||void 0===t||null===(l=t.resize)||void 0===l?void 0:l.src:void 0,pathname:o.slug,canonicalUrl:o.canonicalUrl})};function d(e){let{...n}=e;return l.createElement(m,n)}},9958:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.p},default:function(){return i}});var l=t(6540),a=t(8453);function o(e){const n=Object.assign({h3:"h3",ul:"ul",li:"li",code:"code",a:"a",pre:"pre"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h3,null,"Background"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"In Python, we use ",l.createElement(n.code,null," p = subprocess.Popen(cmd)")," to start a command and call ",l.createElement(n.code,null,"p.terminate()"),"  to stop it. But for some commands on Windows, e.g. ",l.createElement(n.code,null,"ping 127.0.0.1 -n 9999"),' , terminate it will "force stop" it without producing the "ping statistics" in the end. These processes need to be stopped by the CTRL-C event in order to allow them finish some "cleanups" nicely.'),"\n"),"\n",l.createElement(n.h3,null,"Discusses"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"There've been lots of discusses around this topic."),"\n",l.createElement(n.li,null,"FIXME: fix all links"),"\n",l.createElement(n.li,null,"See ",l.createElement(n.a,{href:""},"Sending ^C to Python subprocess objects on Windows - Stack Overflow"),"   and ",l.createElement(n.a,{href:""},"signals - Can I send a ctrl-C (SIGINT) to an application on Windows? - Stack Overflow"),"  for solutions"),"\n",l.createElement(n.li,null,"Also ",l.createElement(n.a,{href:""},"GenerateConsoleCtrlEvent function - Windows Console | Microsoft Docs"),"  and ",l.createElement(n.a,{href:""},"subprocess — Subprocess management — Python 3.9.2 documentation")," for some official info"),"\n"),"\n",l.createElement(n.h3,null,"Summary"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Two solutions","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Solution 1, use ",l.createElement(n.code,null,"subprocess.send_signal(signal.CTRL_C_EVENT)"),"  and ignore the KeyboardInterrupt exception at the caller side","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"The key is to handle the side effects of the CTRL-C event, a simple solution is to wait in the caller process until child process exited."),"\n",l.createElement(n.li,null,"example code","\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},' # stop the process\n p.send_signal(signal.CTRL_C_EVENT)\u2028\n \n # wait in the caller process to ignore the KeyboardInterrupt\ntry:\n    # needs to be longer than the time costs that child process requires to exit\n    time.sleep(10)\nexcept KeyboardInterrupt:\n    print("Ignored keyboard interrupt")\n')),"\n"),"\n",l.createElement(n.li,null,"Cons","\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"The CTRL-C event is sent to the whole process group, which means if your python main process starts a lot of processes, e.g. started multiple ",l.createElement(n.code,null,"ping -n 9999")," commands, cancel either one will result in all processes (which have the same process group and have not ignored the KeyboardInterrupt exception) exited earlier than expected."),"\n"),"\n"),"\n",l.createElement(n.li,null,"In short, this is a solution for simple applications, or applications don't have multiple child processes with the same process group at the same time."),"\n"),"\n"),"\n",l.createElement(n.li,null,'Solution 2, use some "Windows hacks"',"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"The key the to completely avoid CTRL-C message being spread to other processes."),"\n",l.createElement(n.li,null,"Starts a new command, which will free the console, attach to the target console, and fires the CTRL-C event."),"\n",l.createElement(n.li,null,"See example code shared in ",l.createElement(n.a,{href:""},"Sending ^C to Python subprocess objects on Windows - Stack Overflow")),"\n",l.createElement(n.li,null,"FIXME: add portal here."),"\n"),"\n"),"\n"),"\n"),"\n"),"\n",l.createElement(n.h3,null,"The final solution"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"I've created a ",l.createElement(n.a,{href:""},"console-ctrl project")," python package based on the ",l.createElement(n.a,{href:""},'Solution 2, use some "Windows hacks"')," above."),"\n",l.createElement(n.li,null,"FIXME: add portal here."),"\n",l.createElement(n.li,null,"See README for details."),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?l.createElement(n,e,l.createElement(o,e)):o(e)},s=t(70);function i(e){return l.createElement(s.A,e,l.createElement(r,e))}s.A}}]);
//# sourceMappingURL=component---gatsby-themes-themes-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-how-to-stop-a-console-process-on-windows-using-python-index-mdx-92691bd1561a66896cec.js.map